<!DOCTYPE html>
<html>

<head>
  <title>{{title}}</title>

  <!-- Ensures the viewer works best across various browsers and devices -->
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1 user-scalable=no" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z" crossorigin="anonymous">

  <!-- CSS for this web application -->
  <link rel='stylesheet' href='/stylesheets/style.css' />

  <!-- CSS required by the viewer -->
  <link rel="stylesheet" href="viewer-assets/css/normalize.min.css">
  <link rel="stylesheet" href="viewer-assets/css/viewer.css">

  <!-- JS required by the viewer -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.20.0/axios.min.js"></script>
  <script src="viewer-assets/js/jquery-3.4.1.min.js"></script>
  <script src="viewer-assets/js/jquery.hotkeys.min.js"></script>
  <script src="viewer-assets/js/underscore.min.js"></script>
  <script src="viewer-assets/js/viewercontrol.js"></script>
  <script src="viewer-assets/js/viewer.js"></script>
  <script src="viewer-assets/js/viewerCustomizations.js"></script>

  <!-- Create the viewer inside of the "viewingContainer" div, and initialize it with the viewingSessionId  -->
  <script type="text/javascript">
  var showViewer =  async (viewingSessionId) => {
      $('#viewerContainer').pccViewer({
        documentID: viewingSessionId,
        imageHandlerUrl: '/pas-proxy',     // Base path the viewer should use to make requests to PAS (PrizmDoc Application Services).
        viewerAssetsPath: 'viewer-assets', // Base path the viewer should use for static assets
        resourcePath: 'viewer-assets/img', // Base path the viewer should use for images
        language: viewerCustomizations.languages['en-US'],
        template: viewerCustomizations.template,
        icons: viewerCustomizations.icons,
        annotationsMode: "LayeredAnnotations", // Use the new "LayeredAnnotations" system, which will persist annotation data as JSON (instead of the default "LegacyAnnotations" system, which uses a different XML format)
        redactionReasons: {
          enableRedactionReasonSelection: true, // Enable the UI to allow users to select a redaction reason.
          enableFreeformRedactionReasons: true, // Allow users to type a custom redaction reason.
          enableMultipleRedactionReasons: true, // Allow users to apply multiple redaction reasons to a single redaction (requires a backend running version 13.13 or higher)

          // TODO: Define your own set of redaction reasons for your users to pick from:
          reasons: [{
            reason: '1.a',                   // Text to apply to the redaction itself.
            description: 'Client Privilege'  // Optional extended description the user will see when choosing from the list of redaction reasons.
          }, {
            reason: '1.b',
            description: 'Privacy Information'
          }, {
            reason: '1.c'
          }]
        }
      });
  }
  var openFile = async (fileName) => {
    const fileResponse = (await axios('/viewFile/'+encodeURIComponent(fileName))).data
    console.info(fileResponse)
    showViewer(fileResponse.viewingSessionId)
  }
  </script>
</head>

<body>
  <div class="fileMenu">
    {{#each fileList}}
      <p><a href="#" onclick="openFile('{{this}}')">{{this}}</a></p>
    {{/each}}
  </div>
  <div id="viewerContainer" style="width: 80%; height: 60%"></div>
</body>

</html>
